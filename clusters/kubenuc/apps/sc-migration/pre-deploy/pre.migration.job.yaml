---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pv-migrator
  namespace: unifi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: unifi
  name: full-access-unifi
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apps", "batch", "extensions", "policy", "rbac.authorization.k8s.io"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: full-access-unifi-binding
  namespace: unifi
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: full-access-unifi
subjects:
- kind: ServiceAccount
  name: pv-migrator
  namespace: unifi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pv-global-patch
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pv-global-patch-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pv-global-patch
subjects:
- kind: ServiceAccount
  name: pv-migrator
  namespace: unifi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: unifi-sc-migration-pre
  namespace: unifi
spec:
  template:
    spec:
      serviceAccountName: pv-migrator
      restartPolicy: Never
      containers:
      - name: migration
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - >
            echo "Waiting for unifi to be ready" &&
            kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=unifi -n unifi --timeout=5m &&
            echo "Unifi is ready, starting SC migration" &&
            kubectl scale deploy -n unifi unifi --replicas=0 &&
            sleep 15 &&
            kubectl delete pvc unifi-data &&
            kubectl patch pv pvc-5bfe0ca3-a0b0-4de0-af3e-c4a4d5778883 --type=json -p='[{\"op\": \"remove\", \"path\": \"/spec/claimRef\"}]' &&
            echo "Removed claimRef from PV, now it can be reused"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: unifi-data-old
  namespace: unifi
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: longhorn
  volumeMode: Filesystem
  volumeName: pvc-5bfe0ca3-a0b0-4de0-af3e-c4a4d5778883
